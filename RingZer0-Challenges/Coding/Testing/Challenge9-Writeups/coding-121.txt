# RingZer0 CTF #121
## "Execute me if you can"

__url: http://ringzer0team.com/challenges/121__


__flag: FLAG-W2gudjVCAlhexK1c3IfPun0CGs__


this was a tricky one that got me a while to figure out, mostly because when
i read *"execute this and send back the answer"* my first thought was *«how
about no»* thus another approach was in order to obtain the flag.


first things first
--

we *need* to understand what the shellcode is doing, i'm not gonna run it, so
we'll get a sample, compile it and link it into an elf64 executable:

```bash
~/ctf/coding/121 echo -ne "bits 64\nglobal main\nmain:\ndb " > sc.asm;
                 echo "\xeb\x4d\x5e ... \x52\x32\x5d" |
                 sed -r 's/\\x(..)/0x\1, /g;s/, $//' >> sc.asm
~/ctf/coding/121 nasm -f elf64 sc.asm
~/ctf/coding/121 ld -Ttext 0x400000 -o sc sc.o
~/ctf/coding/121 file sc
sc: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped
```

alright. now let's see what's going on here (i took the freedom to add some
labels and beautify the code a bit for the sake of readability):

```bash
~/ctf/coding/121 objdump -M intel -D -w sc
```

```asm
0000000000400000 <_start>:
  400000:       eb 4d                   jmp    _end <_start+0x4f>

_real_start:
  400002:       5e                      pop    rsi
  400003:       66 83 ec 0c             sub    sp,0xc
  400007:       48 89 e0                mov    rax,rsp
  40000a:       48 31 c9                xor    rcx,rcx
  40000d:       68 2b 9d 69 64          push   0x64699d2b
  400012:       48 89 cf                mov    rdi,rcx
  400015:       80 c1 0c                add    cl,0xc

_loop_1:
  400018:       40 8a 3e                mov    dil,BYTE PTR [rsi]
  40001b:       40 f6 d7                not    dil
  40001e:       40 88 38                mov    BYTE PTR [rax],dil
  400021:       48 ff c6                inc    rsi
  400024:       68 c9 73 8f f6          push   0xfffffffff68f73c9
  400029:       48 ff c0                inc    rax
  40002c:       e2 ea                   loop   _loop_1 <_start+0x18>

  40002e:       2c 0c                   sub    al,0xc
  400030:       48 89 c6                mov    rsi,rax
  400033:       68 eb ae 23 b8          push   0xffffffffb823aeeb
  400038:       48 31 c0                xor    rax,rax
  40003b:       48 89 c7                mov    rdi,rax
  40003e:       04 01                   add    al,0x1
  400040:       48 89 c2                mov    rdx,rax
  400043:       80 c2 0b                add    dl,0xb
  400046:       0f 05                   syscall

  400048:       48 31 c0                xor    rax,rax
  40004b:       04 3c                   add    al,0x3c
  40004d:       0f 05                   syscall

_end:
  40004f:       e8 ae ff ff ff          call   _real_start <_start+0x2>

  ;
  ; hrm... this doesn't look right:
  ;
  400054:       90                      nop
  400055:       93                      xchg   ebx,eax
  400056:       85 bc c9 c8 c7 af 8d    test   DWORD PTR [rcx+rcx*8-0x72503838],edi
  40005d:       b7 9a                   mov    bh,0x9a
  40005f:       be ee b8 e9 b8          mov    esi,0xb8e9b8ee
  400064:       fb                      sti
  400065:       92                      xchg   edx,eax
  400066:       11 56 4a                adc    DWORD PTR [rsi+0x4a],edx
  400069:       03 d6                   add    edx,esi
  40006b:       17                      (bad)
  40006c:       68 35 2a f1 47          push   0x47f12a35
  400071:       5b                      pop    rbx
  400072:       52                      push   rdx
  400073:       41                      rex.B
  400074:       4e                      rex.WRX
  400075:       44 53                   rex.R push rbx
  400077:       54                      push   rsp
  400078:       52                      push   rdx
  400079:       32                      .byte 0x32
  40007a:       5d                      pop    rbp
```

so, at a glance, we can immediately spot a couple of things (i'll shorten some
addresses to the interesting bit):

1. at entry, we'll __jmp__ 0x4f forward (rip = 0x4f)

   ```asm
    400000 <_start>:
    400000:       eb 4d                   jmp    _end <_start+0x4f>
   ```

2. once we reached our destination, we'll __call__ at **_real_start** (
   **rip** = 0x02, stack += previous_rip + 1 instruction)

   ```asm
   _end:
     40004f:       e8 ae ff ff ff          call   _real_start <_start+0x2>
     400054:       90                      nop
     ...           ...                     ...
   ```

this first two steps are *really* important. in fact, it's a niftly little
trick that made me smile when i first saw it: **call**ing at 0x4f to 0x02 will
put the next address in the stack as a **ret** address, and the **pop rsi** at
0x02 will grab that.

the trick here is that our string lies at 0x54, aka the new ret address held by
**rsi** now. this way obfuscates obvious **push**es or **lea**s, making it a
bit harder to understand where the string is coming from.

there's also a herring string at the end of the shellcode ([RANDSTR2]), but
we got bigger fishes to fry so let's continue:


3. **rsi** will now contain the start location of our string (0x54), taken
   the retaddr trick

   ```asm
   _real_start:
     400002:       5e                      pop    rsi
   ```

4. **sub**tracting **0xc** to **rsp** will make it point to our string

   ```asm
     400003:       66 83 ec 0c             sub    sp,0xc
   ```

5. the string pointer is **mov**ed to **rax**, **rcx** is cleared and bogus
   data gets pushed to the stack to get the first byte of the string.
   shortly after, a loop is started with 0xc as a counter in **rcx**:

   ```asm
    400007:       48 89 e0                mov    rax,rsp
    40000a:       48 31 c9                xor    rcx,rcx
    40000d:       68 2b 9d 69 64          push   0x64699d2b
    400012:       48 89 cf                mov    rdi,rcx
    400015:       80 c1 0c                add    cl,0xc
   ```

   1. a byte from **rsi** is moved to **rdi**

   ```asm
    400018:       40 8a 3e                mov    dil,BYTE PTR [rsi]
   ```

   2. said byte is negated (logical bitwise not)

   ```asm
    40001b:       40 f6 d7                not    dil
   ```

   3. the ^byte is **mov**ed to **rax** which points to a place in our
      stack that will hold the decoded string

    ```asm
    40001e:       40 88 38                mov    BYTE PTR [rax],dil
    ```

   4. **rsi** is incremented for the next cycle and more data is pushed to
      the stack to move the stack pointer back to get the next byte; **rax** is
      incremented to the next slot, ready for our next decoded byte; the
      routine loops back to point 1

    ```asm
      400021:       48 ff c6                inc    rsi
      400024:       68 c9 73 8f f6          push   0xfffffffff68f73c9
      400029:       48 ff c0                inc    rax
      40002c:       e2 ea                   loop   _loop_1 <_start+0x18>
    ```

6. 0xc is **sub**tracted from **rax**, which now points to the beginning of
   our decoded string

   ```asm
     40002e:       2c 0c                   sub    al,0x0c
   ```

7. here's another great trick: we can see the **syscall** being made. 0x1
   is (eventually) moved to **rax** (which holds what kind of syscall we
   need to invoke, in this case 0x1 or sys_write). now, **syscall** expects
   these parameters:

   1. a file descriptor (fd) in **rdi**
   2. a const char* (buf) in **rsi**
   3. a size_t (count) for *buf in **rdx**

   the trick here is that **rdi** holds 0x0 (**rax** held 0x0 when its
   value was **mov**ed to **rdi** @0x3b), and a 0x0 file descriptor in
   sys_write means 'stdin', not 'stdout'. the string is being sent to
   the standard input instead of a common 'output' buffer like stdout,
   stderr (which is not output per sé but please bear with me here).

   ```asm
    400038:       48 31 c0                xor    rax,rax
    40003b:       48 89 c7                mov    rdi,rax
    40003e:       04 01                   add    al,0x1
    400040:       48 89 c2                mov    rdx,rax
    400043:       80 c2 0b                add    dl,0xb
    400046:       0f 05                   syscall
   ```

8. **rax** is cleared and sys_exit is called. show's over, boys!

   ```asm
    400048:       48 31 c0                xor    rax,rax
    40004b:       04 3c                   add    al,0x3c
    40004d:       0f 05                   syscall
   ```


i'm sure that last thing threw off a lot of people who tried to execute the
shellcode and pipe its output somewhere. hilarious, Mr.Un1k0d3r, thanks for
the entertainment, that was fun!

```bash
~/ctf/coding/121 ./121.py
    string is: GPZlH1U5igz8
    FLAG-W2gudjVCAlhexK1c3IfPun0CGs
```

so, without further ado, let's get some shit done:


```python
#!/usr/bin/python2

import sys
import requests
import lxml.html
import re

url = "http://ringzer0team.com/challenges/121"
cookies = dict(PHPSESSID="")

# create a requests session using our phpsessid cookie
r = requests.get(url, cookies=cookies)

# get the html content for the challenge
doc = lxml.html.document_fromstring(r.text)

# the shellcode is the second element in the object returned by text()
msg = doc.xpath('//div[@class="message"]/text()')[1].split()[0]

# get the bindump of the shellcode
sc = msg.replace('\\x', '').decode('hex')

# go down at offset 0x54 (remember? jmp+call rsp trick), grab 0xc bytes and
# spit out a hex string for us to process
sc = sc[0x54:0x54+0x0c].encode('hex')

# get the nibble, convert it to int, negate it and add it to our string
res = ''.join(chr(int(sc[x:x+2], 16) ^ 0xff) for x in xrange(0, len(sc), 2))

# yeah, baby! reverse engineering wins!
print "string is: " + res

# use it as the message
r = requests.get(url + '/' + res, cookies=cookies)

# get the html content for the response page
doc = lxml.html.document_fromstring(r.text)

# extract the flag (or the error alert) from the page
print doc.xpath('//div[contains(@class, "alert")]/text()')[0]
```
