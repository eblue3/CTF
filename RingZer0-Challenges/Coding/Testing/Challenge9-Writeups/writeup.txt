
We could just send this to a simple c runner with the various protections
modern linux provides turned off but it's worth having a look at it:

0x00601042      5e             pop rsi
0x00601043      6683ec0c       sub sp, 0xc                          
0x00601047      4889e0         mov rax, rsp                        
0x0060104a      4831c9         xor rcx, rcx                         
0x0060104d      6866c0dee8     push 0xffffffffe8dec066              
0x00601052      4889cf         mov rdi, rcx                         
0x00601055      80c10c         add cl, 0xc                          
0x00601058      408a3e         mov dil, byte [rsi]                       
0x0060105b      40f6d7         not dil                              
0x0060105e      408838         mov byte [rax], dil                  
0x00601061      48ffc6         inc rsi                                     
0x00601064      681ed8f4cb     push 0xffffffffcbf4d81e              
0x00601069      48ffc0         inc rax                              
0x0060106c      e2ea           loop 0x601058                    
0x0060106e      2c0c           sub al, 0xc                          
0x00601070      4889c6         mov rsi, rax                         
0x00601073      68ea49867b     push 0x7b8649ea                      
0x00601078      4831c0         xor rax, rax                         
0x0060107b      4889c7         mov rdi, rax                         
0x0060107e      0401           add al, 1                            
0x00601080      4889c2         mov rdx, rax                         
0x00601083      80c20b         add dl, 0xb                          
0x00601086      0f05           syscall                              
0x00601088      4831c0         xor rax, rax                         
0x0060108b      043c           add al, 0x3c   
0x0060108d      0f05           syscall                              
0x0060108f      e8aeffffff     call 0x601042        
0x00601094      ad             lodsd eax, dword [rsi]               
0x00601095      b986b2a5a7     mov ecx, 0xa7a5b286                  
0x0060109a      858fcdb3c7b6   test dword [rdi - 0x49384c33], ecx 
0x006010a0  ~   a850           test al, 0x50  

The first thing it does is jump to a call back into the shellcode

0x00601040      eb4d           jmp 0x60108f                 
..
0x0060108f      e8aeffffff     call 0x601042 

Just after a call the stack will contain the return value which will be
the next instruction after the call so rsi will contain 0x00601094

0x00601042      5e             pop rsi

It's interesting that the code from 94 onwards looks like garbage

The stack is allocated space for 0xc of data and the corresponding
stack pointer is saved off to rax

0x00601043      6683ec0c       sub sp, 0xc                          
0x00601047      4889e0         mov rax, rsp 

Then we have a push and a little loop going on:

0x0060104a      4831c9         xor rcx, rcx                         
0x0060104d      6866c0dee8     push 0xffffffffe8dec066              
0x00601052      4889cf         mov rdi, rcx                         
0x00601055      80c10c         add cl, 0xc                          
0x00601058      408a3e         mov dil, byte [rsi]                       
0x0060105b      40f6d7         not dil                              
0x0060105e      408838         mov byte [rax], dil                  
0x00601061      48ffc6         inc rsi                                     
0x00601064      681ed8f4cb     push 0xffffffffcbf4d81e              
0x00601069      48ffc0         inc rax                              
0x0060106c      e2ea           loop 0x601058  

rsp and rax start at the same point but the stack grows downwards
so the first push and the pushes within the loop are growing away 
from rax. This leaves the memory @ rax unaffected by the pushes
so with a counter of 0xc (rcx) the loop is effectively overwriting
what was the return value before we popped it off with a not of
0xc bytes starting at 601094.

After the loop 

0x0060106e      2c0c           sub al, 0xc                          
0x00601070      4889c6         mov rsi, rax                         
0x00601073      68ea49867b     push 0x7b8649ea                      
0x00601078      4831c0         xor rax, rax                         
0x0060107b      4889c7         mov rdi, rax                         
0x0060107e      0401           add al, 1                            
0x00601080      4889c2         mov rdx, rax                         
0x00601083      80c20b         add dl, 0xb                          
0x00601086      0f05           syscall                              

It's doing a syscall, rax is going to be 1 being zero'd and having one
added to it which corresponds to the write syscall

Lookng up the params
    fd -> rdi
    buf-> rsi
    len-> rdx

So rax will have been incremented by 0xc on the loop so the 
sub, 0xc will put it back pointing to the start.

This goes into rsi as the buffer and the 1 for the syscall is added to
0xb to make 0xc in length

rdi is set to zero so it's stdout.

So 0xc bytes after the call are just not'd and that's output.

A quick check to make sure 

!ad = 52 = R
!b9 = 46 = F
!86 = 79 = y

All printable characters so far so, it's looking pretty good

We want to just capture stdout and that's our ticket to the flag

0x00601088      4831c0         xor rax, rax                         
0x0060108b      043c           add al, 0x3c   
0x0060108d      0f05           syscall                              

rax = 0x3c (60) is exit so all those pushes won't be interferring
with any rets

So really there's no need to actually run it

 Looking at our hex

 \xeb\x4d\x5e\x66\x83\xec\x0c\x48\x89\xe0\x48\x31\xc9\x68\x66\xc0\xde\xe8\x48\x89\xcf\x80\xc1\x0c\x40\x8a\x3e\x40\xf6\xd7\x40\x88\x38\x48\xff\xc6\x68\x1e\xd8\xf4\xcb\x48\xff\xc0\xe2\xea\x2c\x0c\x48\x89\xc6\x68\xea\x49\x86\x7b\x48\x31\xc0\x48\x89\xc7\x04\x01\x48\x89\xc2\x80\xc2\x0b\x0f\x05\x48\x31\xc0\x04\x3c\x0f\x05\xe8\xae\xff\xff\xff\xad\xb9\x86\xb2\xa5\xa7\x85\x8f\xcd\xb3\xc7\xb6\xa8\x50\x41\x77\x60\x0d\xbd\xf0\x31\x03\x01\xf9\x68\x9d\xd1\x1d\x76\x5b\x52\x41\x4e\x44\x53\x54\x52\x32\x5d

 The call back is e8 ae ff ff ff 

So we don't erally have to execute it we just need to not 0xc bytes

So with no exection (and you shouldn't really execute random stuff unless inside a container, inside
a vm whilst wearing oven gloves and a condom):

import requests
import re

session = requests.Session()
session.post('https://ringzer0team.com/login/', data={'username':'xyzzy5475','password':'*******'})

resp = session.get('https://ringzer0team.com/challenges/121')
shellcode = re.findall(re.compile('----- BEGIN SHELLCODE -----<br />[\r\n\s]*(.+?)[\r\n\s]*<br />'), resp.text)[0].encode().decode('unicode-escape')

result = ""

for i in shellcode[84:84+0xc]:
    b = ~(ord(i)) & 0xFF
    result += str(chr(b))

url = 'https://ringzer0team.com/challenges/121/{0}'.format(result)

resp = session.get(url)
print(resp.text)
flag = 'FLAG-' + re.findall('<div class="alert alert-info">FLAG-(.+?)</div>', resp.text)[0]
print(flag)

and we get a flag 
                               
 
Xyzzy