root@iGenius138:~# ssh neo@challenges.ringzer0team.com -p 10091
neo@challenges.ringzer0team.com's password: 
 888888ba  oo                   d8888888P                    a8888a  d888888P                              
 88     8b                           .d8'                   d8    8b    88                                 
 88aaaa8P  dP 88d888b. .d8888b.    .d8'   .d8888b. 88d888b. 88  P 88    88    .d8888b. .d8888b. 88d8b.d8b. 
 88    8b. 88 88    88 88    88  .d8'     88ooood8 88    88 88 d  88    88    88ooood8 88    88 88  88  88 
 88     88 88 88    88 88    88 d8'       88.  ... 88       Y8    8P    88    88.  ... 88    88 88  88  88 
 dP     dP dP dP    dP `8888P88 Y8888888P `88888P' dP        Y8888P     dP    `88888P' `88888P8 dP  dP  dP 
oooooooooooooooooooooooo     88 ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
                        d8888P                                                                             

                                    +---------------------------------+
                                    |  Welcome to the Sysadmin track  |
                                    |                                 |
                                    |   - Play nice and play Fair -   |
                                    |                                 |
                                    |----[ info@ringzer0team.com ]----|
From the first challenge 'til now, i remember there's nothing more related to "Neo" as the process /bin/monitor (which is we have nothing to do yet since beginning)
So, I want to try it first
neo@lxc-sysadmin:~$ ps -u neo
  PID TTY          TIME CMD
25394 ?        00:00:00 monitor
29377 ?        00:00:00 sshd
29378 pts/5    00:00:00 bash
29384 pts/5    00:00:00 ps

more detail with "ps aux | grep neo"

root     25391  0.0  0.0  49932  3404 ?        SN   Dec16   0:00 su neo -c /bin/monitor
neo      25394  0.0  0.0   4216   612 ?        SNs  Dec16   0:00 /bin/monitor

neo@lxc-sysadmin:~$ /bin/monitor
-bash: /bin/monitor: Permission denied

Well, of course it is hard to simply run the command as Neo..
...
After a lot of doing test-around-things, i bought the hint, again.
=> Hint: "Get the list of all processes owned by neo. There must be a way to attach myself!"
=> WELL, YEAH ?? How can i forget the attach-things in proc/<PID>/fd/

neo@lxc-sysadmin:~$ cd /proc/25394/fd
neo@lxc-sysadmin:/proc/25394/fd$ ls -ltra
total 0
dr-xr-xr-x 9 neo neo  0 Dec 16 22:03 ..
dr-x------ 2 neo neo  0 Dec 17 02:50 .
lrwx------ 1 neo neo 64 Dec 17 02:50 2 -> /tmp/tmpfi7xyy1 (deleted)
lrwx------ 1 neo neo 64 Dec 17 02:50 1 -> /tmp/tmpfi7xyy1 (deleted)
lr-x------ 1 neo neo 64 Dec 17 02:50 0 -> /dev/null

Hmm ... It's not looking good. Since stin is redirected to /dev/null, stout and sterr is redirected to a deleted file. Of course i cannot read it
neo@lxc-sysadmin:/proc/25394/fd$ tail -f 0
^C
neo@lxc-sysadmin:/proc/25394/fd$ tail -f 1
tail: cannot open '1' for reading: Permission denied
tail: no files remaining
neo@lxc-sysadmin:/proc/25394/fd$ tail -f 2
tail: cannot open '2' for reading: Permission denied
tail: no files remaining

So. I have to search again for the "Attach"-thing.
And there's a command named "strace" which is i don't have in my Kali to test. But it works on the challenge itself:

eo@lxc-sysadmin:/proc/25394/fd$ strace -p25394
strace: Process 25394 attached
restart_syscall(<... resuming interrupted nanosleep ...>) = 0
write(-1, "telnet 127.0.0.1 23\n", 20)  = -1 EBADF (Bad file descriptor)
write(-1, "user\n", 5)                  = -1 EBADF (Bad file descriptor)
write(-1, "FLAG-a4UVY5HJQO5ddLc5wtBps48A3\n", 31) = -1 EBADF (Bad file descriptor)
write(-1, "get-cpuinfo\n", 12)          = -1 EBADF (Bad file descriptor)
nanosleep({10, 0},

WE GOT THE FLAG
=> FLAG-a4UVY5HJQO5ddLc5wtBps48A3

More information about strace -p<pid>
In the simplest case strace runs the specified command until it
       exits.  It intercepts and records the system calls which are called
       by a process and the signals which are received by a process.  The
       name of each system call, its arguments and its return value are
       printed on standard error or to the file specified with the -o
       option.

       strace is a useful diagnostic, instructional, and debugging tool.
       System administrators, diagnosticians and trouble-shooters will find
       it invaluable for solving problems with programs for which the source
       is not readily available since they do not need to be recompiled in
       order to trace them.  Students, hackers and the overly-curious will
       find that a great deal can be learned about a system and its system
       calls by tracing even ordinary programs.  And programmers will find
       that since system calls and signals are events that happen at the
       user/kernel interface, a close examination of this boundary is very
       useful for bug isolation, sanity checking and attempting to capture
       race conditions.
       
-p pid      Attach to the process with the process ID pid and begin
                   tracing.  The trace may be terminated at any time by a
                   keyboard interrupt signal (CTRL-C).  strace will respond
                   by detaching itself from the traced process(es) leaving
                   it (them) to continue running.  Multiple -p options can
                   be used to attach to many processes in addition to
                   command (which is optional if at least one -p option is
                   given).  -p "`pidof PROG`" syntax is supported.