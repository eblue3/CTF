Mhh, so a punchcard. Such challenge is quiet easy to solve by hand once you have the punchcard mapping.
I found a mapping here for ex : http://www.kloth.net/services/cardpunch.php and I decided to not take the easy path, and try to write some code to decode this for me.

I first converted the picture to a black and white one, using convert and its thresholds options to keep only what is really dark. The command I used was :

convert -white-threshold 10% level2.jpg level2-bw.jpg

which gives me a picture with only the "punched" parts (black squares).

I then wrote a code which, basically :

 - get all black pixels coordinates
 - compute avg width / height of a square 
 - compute average blank space between 2 cols / rows
 - get value corresponding to each square position based on avg size / space
 - map them to a dictionnary which translates DEC029 format to humanreadable

The code is :

######################################################
#!/usr/bin/env ruby
#
# convert -white-threshold 10% level2.jpg level2-bw.jpg
#
require 'rmagick'
require_relative '../scripts/pcard.rb'

img_src=ARGV[0]
img="bw-#{img_src}"
puts "Convert image so that all not-black pixels are converted to white"
`convert -white-threshold 1% #{img_src} #{img}`
if $? != 0
  puts "Something wrong happen during convert"
  exit 1
end
puts "Working on #{img}"
pixels = []
cols = []
rows = []
Magick::Image.read(img)[0].each_pixel do |pixel, col, row|

  # Get all black pixels

  if pixel.red + pixel.green + pixel.blue == 0
  #  puts "Black pixel at: #{col}x#{row}"
    pixels << [ col,row ]
    cols << col
    rows << row
  end
end

# Try to compute avg width / height
cols.uniq!.sort!
rows.uniq!.sort!

actual_col = cols.first
square_first_col = actual_col

cols_width = []
cols.each_with_index { |c, index|
  old_col = actual_col
  actual_col = c

  if actual_col > old_col + 2 or index == cols.length - 1
    width = old_col - square_first_col
#    puts "Found a square of #{width}px width"
    cols_width << width
    square_first_col = actual_col
  end
}

actual_row = rows.first
square_first_row = actual_row
rows_height = []
rows.each_with_index { |r, index|
  old_row = actual_row
  actual_row = r

  if actual_row > old_row + 2 or index == rows.length - 1
    height = old_row - square_first_row
#    puts "Found a square of #{height}px height"
    rows_height << height
    square_first_row = actual_row
  end
}

width_avg = cols_width.reduce(:+) / cols_width.size
height_avg = rows_height.reduce(:+) / rows_height.size

puts "Found #{cols_width.length} different columns with average width #{width_avg}"
puts "Found #{rows_height.length} different rows with average height #{height_avg}"

# average space between each square
# (last black pixel - first black pixel - (average width *  #square)) / (#square - 1)
width_space_avg = (cols.max - cols.min - cols_width.reduce(:+)) / (cols_width.length - 1)
height_space_avg = (rows.max - rows.min - rows_height.reduce(:+)) / (rows_height.length - 1)

puts "Average blank space between 2 cols is #{width_space_avg} and between 2 rows is #{height_space_avg}"

# build results
# For each col, get all the rows
vals = []
(0..cols_width.length).each { |column|
  min_y = cols.min + column * (width_space_avg + width_avg)
  max_y = min_y + width_avg + 2
  cursum = 0
  curval = ''
  (0..rows_height.length).each { |currow|
    min_x = rows.min + currow * (height_space_avg + height_avg)
    max_x = min_x + height_avg + 2
    # Check if we have pixels in this range
    valid_pixels = pixels.select { |y,x|
      x >= min_x and x <= max_x and y >= min_y and y <= max_y
    }
    if valid_pixels.length > 10 # Must have more than 10 black pixels
      if rows_height.length == 12  #Not only numeric lines, but also  2 extra lines
        if currow <= 1
          curval += '1'
    #      print valid_pixels.to_a
        else
          cursum = currow - 2
          curval += cursum.to_s
        end
      else
          cursum = currow - 2
          curval += cursum.to_s
      end
    else
      if rows_height.length == 12  #Not only numeric lines, but also  2 extra lines
        if currow <= 1
          curval += '0'
        end
      end
    end
  }
  #STDOUT.flush
  vals << curval
#  puts "#{curval} - #{DEC029[curval]}"
}
puts "Raw data, comma separated : "
puts ""
puts vals.join(',')
puts "Parsed data , DEC029 format :"
puts
puts vals.map{ |e| DEC029.include?(e) ? DEC029[e] : ' '}.join

######################################################

scripts/pcard.rb is only the mapping dict, which looks like (only putting part of it) :


DEC029 = {
  '001' => '1',
  '002' => '2',
  '003' => '3',
  '004' => '4',
  '005' => '5',
  '006' => '6',
  '007' => '7',
  '008' => '8',
  '009' => '9',
  '000' => '0',
  '10' => '&',
  [...]

So what the script does is to convert each col to a 2 or 3 chars string, with:
 
- first char can be 0 or 1
- 2nd can also be 0 or 1
- 3rd can be 0 to 9 based on square position

The script works well only because there is at least one square for each col /
row, so avg computation are ok; but it won't work for the 2nd punchcard
challenge :)

Run of this script gave me :


Convert image so that all not-black pixels are converted to white
Working on bw-level2.png
Found 55 different columns with average width 25
Found 12 different rows with average height 74
Average blank space between 2 cols is 27 and between 2 rows is 75
Raw data, comma separated :

106,013,101,107,01,104,102,01,109,015,104,105,0007,0028,003,008,000,001,00038,0005,101,013,0028,106,013,101,107,01,102,004,009,003,008,000,001,103,104,102,01,008,003,001,101,102,104,104,106,101,006,002,008,101,103,003,001,00
Parsed data , DEC029 format :

FLAG-DB-INDEX:3801,VAL:FLAG-B493801CDB-831ABDDFA628AC31

